- name: Generate the configured Raspberry Pi
  vars:
    tmp_img : /tmp/rpi5.img
    fix_img : /tmp/rpi5_modified.img
    install_target: "/dev/null"
    root_path: /tmp/mnt/mounted_iso_root
    boot_path: /tmp/mnt/mounted_iso_boot
  hosts: localhost
  become: false
  tasks:
    - name: Assert that the user has a disk inserted
      assert:
        that: install_target != "/dev/null"
        fail_msg: 'The "install_target" variable is missing. Please run with --extra-vars="install_target=/dev/blah"'
        success_msg: "The 'install_target' is set to: {{ install_target }}"

    - name: Download and mount the Dietpi image
      vars:
        base_img : "https://dietpi.com/downloads/images/testing/DietPi_RPi5-ARMv8-Bookworm.img.xz"
        base_md5 : "sha256:0cff3e4888abc289a14b63a02d9ec5f285023d6338ad48998098ee46b50d715c"
      block:
      - name: Ensure necessary packages are installed
        become: true
        pacman:
          name:
            - qemu-full
            - libguestfs
          state: present
          update_cache: yes

      - name: Download OS image file
        get_url:
          url : '{{ base_img }}'
          dest: '{{ tmp_img }}.xz'
          checksum: '{{ base_md5 }}'
          mode: 'a+wrx'

      - name: Create a mount point directories
        file:
          path: '{{ item }}'
          state: directory
        loop:
          - '{{ boot_path }}'
          - '{{ root_path }}'

      - name: Extract the xz image
        shell: |
          cp {{ tmp_img }}.xz {{ tmp_img }}.xz_backup
          xz -d '{{ tmp_img }}.xz'
          mv {{ tmp_img }}.xz_backup {{ tmp_img }}.xz
        args:
          creates: '{{ tmp_img }}'


    - name: Configure the startup params
      vars:
        boot_part: /dev/sda1
        root_part: /dev/sda2
      block:
        - name: Mount the iso (boot partition)
          environment:
            LIBGUESTFS_DEBUG: 1
            LIBGUESTFS_TRACE: 1
          become: true
          shell: |
            guestmount --format=raw -o allow_other -a '{{ tmp_img }}' -m '{{ boot_part }}' '{{ boot_path }}' 2>> /tmp/errors.txt
          args:
            creates: |
              '{{ boot_path }}/config.txt'

        - name: Replace config lines
          block:
          - name: Remove all dtparam occurences
            shell: 'sed -i "/^dtparam=/d; /^#dtparam=/d" {{ boot_path }}/config.txt'

          - name: Update other params
            loop: ## we don't need a display
              - { regexp: '^#*hdmi_safe=.*', line: 'hdmi_safe=0' }
              - { regexp: '^#*hdmi_blanking=.*', line: 'hdmi_blanking=0' }
              - { regexp: '^#*disable_overscan=.*', line: 'disable_overscan=1' }
              - { regexp: '^#*display_auto_detect=.*', line: 'display_auto_detect=0' }
              - { regexp: '^#*display_hdmi_rotate=.*', line: 'display_hdmi_rotate=3' }
              - { regexp: '^#*disable_splash=.*', line: 'disable_splash=0' }
              - { regexp: '^#*temp_limit=.*', line: 'temp_limit=50' }
              - { regexp: '^#*framebuffer_width=.*', line: 'framebuffer_width=600' }
              - { regexp: '^#*framebuffer_height=.*', line: 'framebuffer_height=1024' }
              - { regexp: '^#*dtoverlay=.*', line:  'dtoverlay=vc4-kms-v3d,noaudio,disable-wifi,disable-bt' }
              - { regexp: '^dtparam=.*', line: 'dtparam=audio,sd_poll_once'}
            lineinfile:
              path: '{{ boot_path }}/config.txt'
              state: present
              regexp: "{{ item.regexp }}"
              line: "{{ item.line }}"
              backup: no

        - name: Get SSH Pub key
          command: 'cat {{ hostvars["vars"]["ssh_pub_key"] }}'
          register: id_rsa_pub_string

        - name: Replace Dietpi lines
          loop: ## the lines are added by default if not found
            - { regexp: '^AUTO_SETUP_KEYBOARD_LAYOUT=.*',       line: 'AUTO_SETUP_KEYBOARD_LAYOUT=de' }
            - { regexp: '^AUTO_SETUP_TIMEZONE=.*',              line: 'AUTO_SETUP_TIMEZONE=Europe/Zurich' }
            - { regexp: '^AUTO_SETUP_NET_ETHERNET_ENABLED=.*',  line: 'AUTO_SETUP_NET_ETHERNET_ENABLED=1' }
            - { regexp: '^AUTO_SETUP_NET_WIFI_ENABLED=.*',      line: 'AUTO_SETUP_NET_WIFI_ENABLED=0' }
            - { regexp: '^AUTO_SETUP_NET_WIFI_COUNTRY_CODE=.*', line: 'AUTO_SETUP_NET_WIFI_COUNTRY_CODE=DE' }
            - { regexp: '^AUTO_SETUP_NET_USESTATIC=.*',         line: 'AUTO_SETUP_NET_USESTATIC=1' }
            - { regexp: '^AUTO_SETUP_NET_STATIC_IP=.*',         line: 'AUTO_SETUP_NET_STATIC_IP={{ hostvars["rpi5"]["ansible_host"] }}' }
            - { regexp: '^AUTO_SETUP_NET_STATIC_MASK=.*',       line: 'AUTO_SETUP_NET_STATIC_MASK=255.255.255.0' }
            - { regexp: '^AUTO_SETUP_NET_STATIC_GATEWAY=.*',    line: 'AUTO_SETUP_NET_STATIC_GATEWAY={{ hostvars["vars"]["ip_gateway"] }}' }
            - { regexp: '^AUTO_SETUP_NET_STATIC_DNS=.*',        line: 'AUTO_SETUP_NET_STATIC_DNS=9.9.9.9 149.112.112.112' }
            - { regexp: '^AUTO_SETUP_NET_HOSTNAME=.*',          line: 'AUTO_SETUP_NET_HOSTNAME={{ hostvars["rpi5"]["host_name"] }}' }
            - { regexp: '^AUTO_SETUP_SSH_SERVER_INDEX=.*',      line: 'AUTO_SETUP_SSH_SERVER_INDEX=-2' } # OpenSSH
            - { regexp: '^AUTO_SETUP_AUTOMATED=.*',             line: 'AUTO_SETUP_AUTOMATED=1' }
            - { regexp: '^AUTO_SETUP_GLOBAL_PASSWORD=.*',       line: 'AUTO_SETUP_GLOBAL_PASSWORD={{ hostvars["rpi5"]["host_pass"] }}' }
            - { regexp: '^CONFIG_CHECK_DIETPI_UPDATES=.*',      line: 'CONFIG_CHECK_DIETPI_UPDATES=0' }
            - { regexp: '^CONFIG_CHECK_APT_UPDATES=.*',         line: 'CONFIG_CHECK_APT_UPDATES=0.' }
            - { regexp: '^CONFIG_SERIAL_CONSOLE_ENABLE=.*',     line: 'CONFIG_SERIAL_CONSOLE_ENABLE=0' }
            - { regexp: '^AUTO_SETUP_SSH_PUBKEY=.*',            line: 'AUTO_SETUP_SSH_PUBKEY="{{ id_rsa_pub_string.stdout }}"' }
            - { regexp: '^SOFTWARE_DISABLE_SSH_PASSWORD_LOGINS=.*', line: 'SOFTWARE_DISABLE_SSH_PASSWORD_LOGINS=0' }   ## only key
            - { regexp: '^SURVEY_OPTED_IN=.*',                  line: 'SURVEY_OPTED_IN=0' }
          ansible.builtin.replace:
            path: '{{ boot_path }}/dietpi.txt'
            regexp: "{{ item.regexp }}"
            replace: "{{ item.line }}"
            backup: no

        - name: Unmount the boot partition
          become: true
          shell: |
            sync
            umount '{{ boot_path }}'

        - name: Mount the iso (root partition)
          become: true
          environment:
            LIBGUESTFS_DEBUG: 1
            LIBGUESTFS_TRACE: 1
          shell: |
            guestmount --format=raw -o allow_other -a '{{ tmp_img }}' -m '{{ root_part }}' '{{ root_path }}' 2> /tmp/errors.txt
          args:
            creates: |
              '{{ root_path }}/etc/dhcpcd.conf'

        - name: Set the SSH config
          loop:
          - { regexp: '^.*Port .*', line: 'Port {{ hostvars["rpi5"]["ansible_port"] }}' }
          - { regexp: '^.*AuthorizedKeysFile .*', line: 'AuthorizedKeysFile  /etc/ssh/authorized_keys' }  ## enforce strict ssh key access
          - { regexp: "^.*Subsystem sftp.*", line: 'Subsystem sftp /usr/lib/openssh/sftp-server' } 
          lineinfile:
            path: '{{ root_path }}/etc/ssh/sshd_config'
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: no
            create: yes

        - name: Install SSH key
          shell: 'cp {{ hostvars["vars"]["ssh_pub_key"] }} {{ root_path }}/etc/ssh/authorized_keys'

        - name: Unmount the root partition
          become: true
          shell: |
            sync
            umount '{{ root_path }}'

        - name: Cleanup mount points
          shell: |
            rmdir '{{ boot_path }}'
            rmdir '{{ root_path }}'

        - name: Move changed ISO
          command: 'mv {{ tmp_img }} {{ fix_img }}'

    - name: Install changed ISO to disk
      become: true
      block:
       - name: DD to disk
         shell: 'dd if={{ fix_img }} of={{ install_target }} status=progress bs=1M; sync;'

    - name: Remove RPi5 from known SSH list
      shell: |
        grep -v "{{ hostvars['rpi5']['ansible_host'] }}" $(dirname {{ hostvars["vars"]["ssh_pub_key"] }})/known_hosts > /tmp/known_hosts && \
        mv -v /tmp/known_hosts $(dirname {{ hostvars["vars"]["ssh_pub_key"] }})/known_hosts


    - name: Tell user to Eject Disk
      debug:
        msg: "Eject the SD card and put it into the Raspberry Pi 5, and then put the power cable in."