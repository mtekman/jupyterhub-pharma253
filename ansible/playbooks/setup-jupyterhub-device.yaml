- name: Setup and Configure JupyterHub Pharma
  hosts: localhost  ##jupyter
  become: false     ## by default don't be root
  vars_files: setup_vars.yml
  tasks:
  - name: Setup Install Directories
    become: yes
    shell: |
      mkdir -p {{ dir_pharma }}
      mkdir -p {{ venv_dir }}
      chmod a+wrx {{ dir_pharma }}
      chmod a+wrx {{ venv_dir }}

  - name: Clone the repo
    shell:
      cmd: |
        ## Shallow clone the Pharma
        git clone --depth 1 https://gitlab.com/mtekman/jupyterhub-pharma253 \
        -b master {{ dir_pharma }}
      creates: '{{ dir_pharma }}/COMPLETE_GUIDE.org'

  - name: Install some prerequisite packages
    become: yes
    apt:
      name:
      - virtualenv
      - pip
      - npm
      - node-configurable-http-proxy
      - ufw
      state: present
      update_cache: yes

  - name: Generate virtualenv for metrics repo and install it
    block:
    - name: Install the Jupyterhub with Metrics into venv
      pip:
        virtualenv: '{{ venv_dir }}'
        virtualenv_python: python3
        name:
        - six
        - '{{ metrics_repo }}'
        - dockerspawner
        - psutil
        - configurable
        - http-proxy

  - name: Setup Docker
    become: yes
    block:
    ## Instructions from: https://docs.docker.com/engine/install/debian/
    - name: Install neccesary docker pre-packages
      apt:
        name:
        - ca-certificates
        - curl
        state: present
        update_cache: yes

    - name: Install docker keyrings
      shell:
        cmd: |
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
        creates: /etc/apt/keyrings/docker.asc

    - name: Add docker repo
      shell:
        cmd: |
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
        creates: /etc/apt/sources.list.d/docker.list

    - name: Install docker packages
      apt:
        name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start docker quickly
      ## We need this so we can extract the docker subnet
      systemd:
        name: docker
        state: started

    - name: Extract the docker subnet
      shell: ip -br a | grep "docker0" | awk '{print $3}'
      ## If this command fails, just set docker_ip to
      ## 172.17.0.1/16
      register: docker_ip

    - name: Stop docker quickly
      ## We stop docker because we need to configure docker
      ## slice limits
      systemd:
        name: docker
        state: stopped

  - name: Configure Jupyterhub Pharma
    block:
    - name: Copy params from backup
      copy:
        src: '{{ dir_pharma }}/template_jupyterhub_config.py'
        dest: '{{ dir_pharma }}/jupyterhub_config.py'
    - name: Set required params
      ## We won't do the full configuration, just a working one.
      loop:
      ## Set Jupyter venv
      - { find: '^jupyter_venv = .*',
           set:  'jupyter_venv = "{{ venv_dir }}"' }
      ## Set Admin users
      - { find: '^c.Authenticator.admin_users = .*',
           set:  'c.Authenticator.admin_users = {{ admin_users }}' }
      ## Set Docker
      - { find: '^c.JupyterHub.hub_ip = .*',
           set:  'c.JupyterHub.hub_ip = "{{ docker_ip.stdout | split("/") | first  }}"' }
      ## Replace the default user "memo" too and his default image
      - { find: '^    "memo" : {',
           set:  '    "tekman2" : {' }
      - { find: '^        "host_homedir_format_string" : "/media/daten/{username}",',
           set:  '        "host_homedir_format_string" : "{{ home_dir }}/{username}",' }
      ## Set Read-only volumes
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: "{{ item.find }}"
        line: "{{ item.set }}"
        backup: no

    - name: Set https params
      when: not use_proxy
      loop:
      - { find: '^server_type = .*',
           set: 'server_type = "https"' }
      - { find: "^    c.JupyterHub.ssl_cert = .*",
           set:  "    c.JupyterHub.ssl_cert = '/etc/letsencrypt/live/{{ public_url }}/fullchain.pem'" }
      - { find: "^    c.JupyterHub.ssl_key = .*",
           set:  "    c.JupyterHub.ssl_key = '/etc/letsencrypt/live/{{ public_url }}/privkey.pem'" }
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: "{{ item.find }}"
        line: "{{ item.set }}"
        backup: no

    - name: Set proxy params
      when: use_proxy
      loop:
      ## Set Proxy
      - { find: '^server_type = .*',
           set:  'server_type = "proxy"' }
      - { find: '^    c.JupyterHub.bind_url = .*',
           set:  '    c.JupyterHub.bind_url = "http://{{ proxy_net }}:{{ proxy_port }}"' }
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: "{{ item.find }}"
        line: "{{ item.set }}"
        backup: no

  - name: Configure Systemd slices
    become: yes
    block:
    - name: Configure the Docker Limits
      copy:
        dest: /etc/systemd/system/docker_limit.slice
        content: |
          [Unit]
          Description=Slice that limits docker resources
          Before=slices.target

          [Slice]
          CPUAccounting=true
          CPUQuota={{ docker_cpuquota_perc }}%
          MemoryAccounting=true
          MemoryHigh={{ docker_memhigh_gb }}G

    - name: Configure Proxy service file
      when: use_proxy
      copy:
        dest: /etc/systemd/system/jupyter_proxy.service
        content: |
          [Unit]
          Description=Maintain SSH Tunnel
          After=network.target

          [Service]
          User={{ proxy_remote_user }}
          ExecStart=/usr/bin/ssh -i {{ proxy_remote_pubkey_loc }} \
           -p {{ proxy_remote_sshport }} \
           -o ServerAliveInterval=60 \
           -o ExitOnForwardFailure=yes \
           -R {{ proxy_bind_port }}:127.0.0.1:{{ proxy_bind_port }} \
           {{ proxy_remote_user }}@{{ proxy_remote_net }} vmstat 120
          RestartSec=15
          Restart=always
          KillMode=mixed

          [Install]
          WantedBy=multi-user.target

    - name: Configure the JupyterHub service file
      copy:
        dest: /etc/systemd/system/jupyterhub.service
        content: |
          [Unit]
          Description=Jupyterhub Docker Service
          After=network.target
          ## weak dependency, jupyter still starts if proxy or docker limitter fails
          Wants={{ (use_proxy | bool) | ternary("jupyter_proxy.service ", "") }}docker_limit.slice

          [Service]
          Environment="PATH={{ venv_dir }}/bin:%h/.local/bin:%h/bin:%h/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          ExecStart={{ venv_dir }}/bin/jupyterhub --config="{{ dir_pharma }}/jupyterhub_config.py"
          WorkingDirectory={{ dir_pharma }}
          Restart=on-failure
          RestartSec=60
          User=root
          KillMode=process

          [Install]
          WantedBy=multi-user.target

  - name: Check if certificate already installed
    become: yes
    stat:
      path: '/etc/letsencrypt/live/{{ public_url }}/fullchain.pem'
    register: certificate_installed

  - name: Install HTTPS certificate
    when: (not use_proxy) and (not certificate_installed.stat.exists)
    become: yes
    block:
    - name: Install certbot
      apt:
        name: certbot
        state: present
        update_cache: yes

    - name: Temporarily allow HTTP
      ufw:
        rule: allow
        name: WWW Full

    - name: Install the certificate
      shell:
        cmd: |
          certbot certonly --standalone -d {{ public_url }} -m {{ admin_email }} --agree-tos

    - name: Disallow HTTP again
      ufw:
        rule: deny
        name: WWW Full

  - name: Post Docker Tasks
    become: yes
    block:
    - name: Set the UFW rules for docker
      ufw:
        rule: allow
        from: '{{ docker_ip.stdout }}'

    - name: Build Docker Image
      shell:
        chdir: '{{ dir_pharma }}'
        cmd: docker buildx build -t bash-python-r docker-image
      ##community.docker.docker_image_build:
      ##  tag: bash-python-r
      ##  path: '{{ dir_pharma }}/docker-image'

  - name: Admin Tasks
    become: yes
    block:
    - name: Copy Pharma tasks
      copy:
        src: '{{ dir_pharma }}/system/etc/profile.d/pharma_admin.sh'
        dest: '/etc/profile.d/pharma_admin.sh'
        mode: a+wrx
    - name: Copy User tasks
      copy:
        src: '{{ dir_pharma }}/system/usr/local/sbin/add_new_pharma_user.sh'
        dest: '/usr/local/sbin/add_new_pharma_user.sh'
        mode: a+wrx


  - name: Finally Start the Server
    become: yes
    block:
    - name: UFW Allow HTTP and HTTPs
      ## See: /etc/ufw/applications.d/ufw-webserver
      ufw:
        rule: allow
        name: WWW Full

    - name: Start Jupyter
      systemd:
        name: jupyterhub
        state: started
        enabled: yes

        
