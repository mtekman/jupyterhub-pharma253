- name: Setup and Configure JupyterHub Pharma
  hosts: localhost  ##jupyter
  become: false     ## by default don't be root
  vars_files: setup_vars.yml
    ## Private vars to populate
    ## public_url: jupyter.example.com
    ## proxy_remote_net: 123.123.123.123
    ## proxy_remote_sshport: 22
    ## admin_users: ["momo, "root"]
    ## admin_email: "whatever@gmail.com" ## for certbot expiry warnings.
    ## intranet_list : ["1.2.3.0/16"]
  vars:
    user_install: jupyterinstall
    ## Dirs
    dir_pharma: /opt/jhub/jupterhub-pharma
    metrics_repo: git+https://github.com/mtekman/jupyterhub@sysmon
    venv_dir: /opt/jhub/venv
    allow_public_access: false ## if true, open http and https to everywhere. Otherwise limit to intranet_list
    ## Proxy
    use_proxy: false
    proxy_bind_port: 58001    ## we assume jupyter and proxy bind to same port.
    proxy_remote_user: proxy-jupyter
    proxy_remote_pubkey_loc: /etc/ssh/proxy-jupyter_key
    ## System Conda
    use_systemwide_conda: true
    systemwide_conda_dir: /opt/sharedconda
    ## Docker
    docker_cpuquota_perc: 69000  ## 100% * num_cores, we leave 10 cores free
    docker_memhigh_gb: 1900      ## 230
    ## Partitioning
    part_userhome : {
       src: "UUID=030789c1-5d89-4044-8255-0474df615655",
       mnt : "/media/daten",  ## no trailing slash
       fstype: "ext4", opts: "defaults", dump: 0, pass: 2
    }
    part_tmp: {
       src: "UUID=c44db4a9-0876-4887-bdee-07ddd548936a",
       mnt: "/tmp",
       fstype: "ext4",
       ## Ideally we use noexec, but then Jupyter does not build...
       ##opts: "defaults,rw,users,noexec,nofail", dump: 0, pass: 0
       opts: "defaults", dump: 0, pass: 0
    }
    part_backup: {
       src: "CIFS=TODO"
       mnt: "/media/backup"
       fstype: "cifs"
    }

  tasks:
  - name: Create Jupyter User
    become: yes
    user:
        name: jupyterinstall
        shell: /bin/bash
        create_home: false
        state: present

  - name: Setup Install Directories
    become: yes
    shell: |
      mkdir -p '{{ dir_pharma }}'
      mkdir -p '{{ venv_dir }}'
      chown -R '{{ user_install }}:{{ user_install }}' '{{ dir_pharma }}'
      chown -R '{{ user_install }}:{{ user_install }}' '{{ venv_dir }}'
      chmod u+wrx '{{ dir_pharma }}'
      chmod u+wrx '{{ venv_dir }}'

  - name: Clone the repo
    become: yes
    shell:
      cmd: |
        ## Shallow clone the Pharma
        git clone --depth 1 https://gitlab.com/mtekman/jupyterhub-pharma253 \
        -b master {{ dir_pharma }}
      creates: '{{ dir_pharma }}/COMPLETE_GUIDE.org'

  - name: Install some prerequisite packages
    become: yes
    apt:
      name:
      - acl ## for become_user
      - node-less
      - virtualenv
      - pip
      - npm
      - node-configurable-http-proxy
      - ufw
      - ca-certificates
      - curl
      state: present
      update_cache: yes

  - name: Install the Jupyterhub with Metrics into venv
    become: yes
    pip:
      virtualenv: '{{ venv_dir }}'
      virtualenv_python: python3
      name:
      - six
      - '{{ metrics_repo }}'
      - dockerspawner
      - psutil
      - configurable
      - http-proxy

  - name: Setup Docker
    become: yes
    block:
    ## Instructions from: https://docs.docker.com/engine/install/debian/
    - name: Install docker keyrings
      shell:
        cmd: |
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
        creates: /etc/apt/keyrings/docker.asc

    - name: Add docker repo
      shell:
        cmd: |
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
        creates: /etc/apt/sources.list.d/docker.list

    - name: Install docker packages
      apt:
        name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start docker quickly
      ## We need this so we can extract the docker subnet
      systemd:
        name: docker
        state: started

    - name: Extract the docker subnet
      tags: ufw, config
      shell: ip -br a | grep "docker0" | awk '{print $3}'
      ## If this command fails, just set docker_ip to
      ## 172.17.0.1/16
      register: docker_ip

    - name: Stop docker quickly
      ## We stop docker because we need to configure docker
      ## slice limits
      systemd:
        name: docker
        state: stopped

  - name: Configure Jupyterhub Pharma
    tags: config
    become: yes
    block:
    - name: Copy params from backup
      copy:
        src: '{{ dir_pharma }}/template_jupyterhub_config.py'
        dest: '{{ dir_pharma }}/jupyterhub_config.py'
    - name: Set required params
      ## We won't do the full configuration, just a working one.
      loop:
      ## Set Jupyter venv
      - { find: '^jupyter_venv = .*',
           set:  'jupyter_venv = "{{ venv_dir }}"' }
      ## Set Admin users
      - { find: '^c.Authenticator.admin_users = .*',
           set:  'c.Authenticator.admin_users = {{ admin_users }}' }
      ## Set Docker
      - { find: '^c.JupyterHub.hub_ip = .*',
           set:  'c.JupyterHub.hub_ip = "{{ docker_ip.stdout | split("/") | first  }}"' }
      ## Replace the default user "memo" too and his default image
      - { find: '^    "memo" : {',
           set:  '    "tekman2" : {' }
      - { find: '^        "host_homedir_format_string" : "/media/daten/{username}",',
           set:  '        "host_homedir_format_string" : "{{ part_userhome.mnt }}/{username}",' }
      ## Set Read-only volumes
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: "{{ item.find }}"
        line: "{{ item.set }}"
        backup: no

    - name: Set systemwide conda params
      when: use_systemwide_conda
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: '    "/opt/shared_micromamba/"     ## shared conda envs'
        line:   '    "{{ systemwide_conda_dir }}"     ## shared conda envs'
        backup: no

    - name: Set https params
      when: not use_proxy
      loop:
      - { find: '^server_type = .*',
           set: 'server_type = "https"' }
      - { find: "^    c.JupyterHub.ssl_cert = .*",
           set:  "    c.JupyterHub.ssl_cert = '/etc/letsencrypt/live/{{ public_url }}/fullchain.pem'" }
      - { find: "^    c.JupyterHub.ssl_key = .*",
           set:  "    c.JupyterHub.ssl_key = '/etc/letsencrypt/live/{{ public_url }}/privkey.pem'" }
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: "{{ item.find }}"
        line: "{{ item.set }}"
        backup: no

    - name: Set proxy params
      when: use_proxy
      loop:
      ## Set Proxy
      - { find: '^server_type = .*',
           set:  'server_type = "proxy"' }
      - { find: '^    c.JupyterHub.bind_url = .*',
           set:  '    c.JupyterHub.bind_url = "http://{{ proxy_net }}:{{ proxy_port }}"' }
      lineinfile:
        path: '{{ dir_pharma }}/jupyterhub_config.py'
        state: present
        regexp: "{{ item.find }}"
        line: "{{ item.set }}"
        backup: no

  - name: Configure Systemd slices
    become: yes
    block:
    - name: Configure the Docker Limits
      copy:
        dest: /etc/systemd/system/docker_limit.slice
        content: |
          [Unit]
          Description=Slice that limits docker resources
          Before=slices.target

          [Slice]
          CPUAccounting=true
          CPUQuota={{ docker_cpuquota_perc }}%
          MemoryAccounting=true
          MemoryHigh={{ docker_memhigh_gb }}G

    - name: Configure Proxy service file
      when: use_proxy
      copy:
        dest: /etc/systemd/system/jupyter_proxy.service
        content: |
          [Unit]
          Description=Maintain SSH Tunnel
          After=network.target

          [Service]
          User={{ proxy_remote_user }}
          ExecStart=/usr/bin/ssh -i {{ proxy_remote_pubkey_loc }} \
           -p {{ proxy_remote_sshport }} \
           -o ServerAliveInterval=60 \
           -o ExitOnForwardFailure=yes \
           -R {{ proxy_bind_port }}:127.0.0.1:{{ proxy_bind_port }} \
           {{ proxy_remote_user }}@{{ proxy_remote_net }} vmstat 120
          RestartSec=15
          Restart=always
          KillMode=mixed

          [Install]
          WantedBy=multi-user.target

    - name: Configure the JupyterHub service file
      copy:
        dest: /etc/systemd/system/jupyterhub.service
        content: |
          [Unit]
          Description=Jupyterhub Docker Service
          After=network.target
          ## weak dependency, jupyter still starts if proxy or docker limitter fails
          Wants={{ (use_proxy | bool) | ternary("jupyter_proxy.service ", "") }}docker_limit.slice

          [Service]
          Environment="PATH={{ venv_dir }}/bin:%h/.local/bin:%h/bin:%h/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          ExecStart={{ venv_dir }}/bin/jupyterhub --config="{{ dir_pharma }}/jupyterhub_config.py"
          WorkingDirectory={{ dir_pharma }}
          Restart=on-failure
          RestartSec=60
          User=root
          KillMode=process

          [Install]
          WantedBy=multi-user.target

  - name: Check if certificate already installed
    tags: ufw
    become: yes
    stat:
      path: '/etc/letsencrypt/live/{{ public_url }}/fullchain.pem'
    register: certificate_installed

  - name: Install HTTPS certificate
    when: (not use_proxy) and (not certificate_installed.stat.exists)
    become: yes
    block:
    - name: Install certbot
      apt:
        name: certbot
        state: present
        update_cache: yes

    - name: Temporarily allow HTTP
      tags: ufw
      ufw:
        rule: allow
        name: WWW Full

    - name: Install the certificate
      shell:
        cmd: |
          certbot certonly --standalone -d {{ public_url }} -m {{ admin_email }} --agree-tos

    - name: Disallow HTTP again
      tags: ufw
      ufw:
        rule: deny
        name: WWW Full

  - name: Install a systemwide conda installation
    when: use_systemwide_conda
    block:
    - name: Download and install micromamba
      shell:
        cmd: |
          curl -L micro.mamba.pm/install.sh -o /tmp/micromamba_install.sh
          chmod +x /tmp/micromamba_install.sh
        creates: /tmp/micromamba_install.sh

    - name: Create shared directory accessible to all
      become: yes
      file:
        path: '{{ systemwide_conda_dir }}'
        state: directory
        mode: a+wx

    - name: Install micromamba and set default system env dir
      become: yes
      environment:
        PREFIX_LOCATION: "{{ systemwide_conda_dir }}"
        BIN_FOLDER: "/usr/local/bin"
        INIT_SHELL: "yes"
        CONDA_FORGE_YES: "no"
      shell:
        cmd: |
          /tmp/micromamba_install.sh < /dev/random
        creates: "{{ systemwide_conda_dir }}/etc/profile.d/micromamba.sh"

    - name: Set shared conda rc in docker image
      tags: dockerimage
      become: yes
      loop:
      - { find: '^  - /opt/shared_micromamba/pkgs',
           set:  '  - {{ systemwide_conda_dir }}/pkgs' }
      - { find: '^  - /opt/shared_micromamba/envs',
           set:  '  - {{ systemwide_conda_dir }}/envs' }
      lineinfile:
        path: '{{ dir_pharma }}/docker-image/shared_mamba.rc'
        state: present
        regexp: '{{ item.find }}'
        line: '{{ item.set }}'
        backup: no

  - name: Post Docker Tasks
    become: yes
    block:
    - name: Get Docker subnet again if lost
      tags: ufw
      shell: ip -br a | grep "docker0" | awk '{print $3}'
      register: docker_ip

    - name: Set the UFW rules for docker
      tags: ufw
      ufw:
        rule: allow
        from: '{{ docker_ip.stdout }}'

    - name: Build Docker Image
      tags: dockerimage
      shell:
        chdir: '{{ dir_pharma }}'
        cmd: docker buildx build -t bash-python-r docker-image
      ##community.docker.docker_image_build:
      ##  tag: bash-python-r
      ##  path: '{{ dir_pharma }}/docker-image'

  - name: Admin Tasks
    become: yes
    block:
    - name: Copy Pharma tasks
      copy:
        src: '{{ dir_pharma }}/system/etc/profile.d/pharma_admin.sh'
        dest: '/etc/profile.d/pharma_admin.sh'
        mode: a+wrx
    - name: Copy User tasks
      copy:
        src: '{{ dir_pharma }}/system/usr/local/sbin/add_new_pharma_user.sh'
        dest: '/usr/local/sbin/add_new_pharma_user.sh'
        mode: a+wrx

  - name: Configure Public Access
    tags: ufw
    when: allow_public_access
    become: yes
    ufw:
      rule: allow
      port: 443
      proto: tcp
      src: '0.0.0.0/0'
      to_ip: '0.0.0.0/0'  ## ipv4 only

  - name: Configure Intranet Access Only
    when: not allow_public_access
    tags: ufw
    become: yes
    loop: '{{ intranet_list }}'
    ufw:
      rule: allow
      src: '{{ item }}'
      to_ip: '0.0.0.0/0'  ## ipv4 only
      port: 443
      proto: tcp

  - name: Set the partitioning
    become: yes
    block:
    - name: Mount the Users
      when: part_userhome is defined
      mount:
        src: '{{ part_userhome.src }}'
        path: '{{ part_userhome.mnt }}'
        fstype: '{{ part_userhome.fstype }}'
        opts: '{{ part_userhome.opts }}'
        dump: '{{ part_userhome.dump }}'
        passno: '{{ part_userhome.pass }}'
        state: mounted

    - name: Mount the Temp
      when: part_tmp is defined
      mount:
        src: '{{ part_tmp.src }}'
        path: '{{ part_tmp.mnt }}'
        fstype: '{{ part_tmp.fstype }}'
        opts: '{{ part_tmp.opts }}'
        dump: '{{ part_tmp.dump }}'
        passno: '{{ part_tmp.pass }}'
        state: mounted

    - name: Mount the Backup
      when: part_backup is defined
      mount:
        src: '{{ part_backup.src }}'
        path: '{{ part_backup.mnt }}'
        fstype: '{{ part_backup.fstype }}'
        opts: '{{ part_backup.opts }}'
        dump: '{{ part_backup.dump }}'
        passno: '{{ part_backup.pass }}'
        state: mounted


  - name: Define the Backup Service
    when: part_backup is defined
    become: yes
    block:
    - name: Systemd backup service with conditional mount
      copy:
        dest: /etc/systemd/system/user_backup.service
        content: |
          [Unit]
          Description=Backup Service
          ConditionPathIsMountPoint={{ part_backup.mnt }}

          [Service]
          Type=oneshot
          ExecStart=rsync -avP '{{ part_userhome.mnt }}' '{{ part_backup.mnt }}'

          [Install]
          WantedBy=multi-user.target

    - name: Systemd backup timer
      copy:
        dest: /etc/systemd/system/user_backup.timer
        content: |
          [Unit]
          Description=Backup timer service

          [Timer]
          OnCalendar=*-*-* 03:00:00
          Persistent=true
          Unit=user_backup.service

          [Install]
          WantedBy=timers.target

    - name: Start the backup service
      systemd:
      systemd:
        name: user_backup.timer
        state: started
        enabled: yes

  - name: Start Jupyter
    become: yes
    systemd:
      name: jupyterhub
      state: started
      enabled: yes
